double EllipticBorder::discriminant(const DoubleMatrix &DF, const DoubleMatrix &DG){
    double A0 = DF(2, 0)*(DG(0, 1)*DG(1, 2) - DG(1, 1)*DG(0, 2));

    double B0 = DF(2, 0)*( DG(1, 1)*DF(0, 2) + DG(0, 2)*DF(1, 1) - DG(0, 1)*DF(1, 2) - DG(1, 2)*DF(0, 1) );

    double C0 = DF(2, 0)*(DF(0, 1)*DF(1, 2) - DF(1, 1)*DF(0, 2));



    double A1 = -DF(2, 1)*(DG(0, 0)*DG(1, 2) - DG(1, 0)*DG(0, 2));

    double B1 = -DF(2, 1)*( DG(1, 0)*DF(0, 2) + DG(0, 2)*DF(1, 0) - DG(0, 0)*DF(1, 2) - DG(1, 2)*DF(0, 0) );

    double C1 = -DF(2, 1)*(DF(0, 0)*DF(1, 2) - DF(1, 0)*DF(0, 2));



    double A2 = DF(2, 2)*(DG(0, 0)*DG(1, 1) - DG(1, 0)*DG(0, 1));

    double B2 = DF(2, 2)*( DG(1, 0)*DF(0, 1) + DG(0, 1)*DF(1, 0) - DG(0, 0)*DF(1, 1) - DG(1, 1)*DF(0, 0) );

    double C2 = DF(2, 2)*(DF(0, 0)*DF(1, 1) - DF(1, 0)*DF(0, 1));

    double A = A0 + A1 + A2;
    double B = B0 + B1 + B2;
    double C = C0 + C1 + C2;

    return B*B - 4.0*A*C; // disc = 0.0 is the boundary of the elliptic region.
}

int EllipticBorder::discriminant_function_on_square(EllipticBorder *obj, double *foncub, int i, int j){
    int is_square = obj->gv->cell_type(i, j);

    GridValues *gv = obj->gv;
    double discriminant_level = obj->discriminant_level;

    foncub[0] = obj->discriminant(gv->JF_on_grid(i + 1, j + 0), gv->JG_on_grid(i + 1, j + 0)) - discriminant_level;

    foncub[1] = obj->discriminant(gv->JF_on_grid(i + 0, j + 0), gv->JG_on_grid(i + 0, j + 0)) - discriminant_level;

    foncub[3] = obj->discriminant(gv->JF_on_grid(i + 0, j + 1), gv->JG_on_grid(i + 0, j + 1)) - discriminant_level;

    if (is_square == CELL_IS_SQUARE){
        foncub[2] = obj->discriminant(gv->JF_on_grid(i + 1, j + 1), gv->JG_on_grid(i + 1, j + 1)) - discriminant_level;
    }

    return 1;
}
