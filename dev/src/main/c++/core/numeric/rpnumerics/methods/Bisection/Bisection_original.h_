#ifndef _BISECTION_
#define _BISECTION_

#include <math.h>

#define BISECTION_CONVERGENCE_OK    0
#define BISECTION_CONVERGENCE_ERROR 1

#define BISECTION_FUNCTION_OK       0
#define BISECTION_FUNCTION_ERROR    2

#define BISECTION_EQUAL_SIGN        3

// Given a function f, and an interval [a, b] (or [b, a]), such that f(a)*f(b) < 0.0, this
// method finds a value c in the interval, such that f(c) = 0.0, approximately,
// by means of the bisection method.
//
//template <class double, class type_out>
class Bisection {
    private:
    protected:
    public:
        static int bisection_method(const double &a_in, const double & b_in, double epsilon, double &c, int (*f)(const double &x, double &y, void *o, void *d), void *object, void *data);
};

#endif // _Bisection_

