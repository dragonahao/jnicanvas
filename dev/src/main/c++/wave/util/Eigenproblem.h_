#ifndef _EIGENPROBLEM_
#define _EIGENPROBLEM_

// Eigenproblem, A*v = lambda*v
//
extern "C" void dgeev_(const char*, const char*, int*, double*, int*, double*, double*, 
                       double*, int*, double*, int*, double*, int*, 
                       int*);

// Generalized eigenproblem, A*v = lambda*B*v
//
extern "C" void dggev_(const char*, const char*,  // JOBVL, JOBVR
                       int*,                      // N
                       double*, int*,             // A, LDA
                       double*, int*,             // B, LDB
                       double*,                   // ALPHAR
                       double*,                   // ALPHAI
                       double*,                   // BETA
                       double*, int*,             // VL, LDVL,
                       double*, int*,             // VR, LDVR,
                       double*, int*,             // WORK, LWORK
                       int*                       // INFO
                      );

#define EIGENPROBLEM_OK      0
#define EIGENPROBLEM_ERROR (-1)

#include <vector>

#include "RealVector.h"
#include "DoubleMatrix.h"
#include "QuickSort.h"

class FluxFunction;
class AccumulationFunction;
class StateEquation;

class Eigenproblem {
    private:
    protected:
        static bool order_family(const Eigenpair &a, const Eigenpair &b){
            return a.r < b.r;
        }

        static bool order_type(const Eigenpair &a, const Eigenpair &b){
            return a.r < b.r;
        }

    public:
        Eigenproblem();
        virtual ~Eigenproblem();

        virtual void eigenproblem(const RealVector &p, std::vector<Eigenpair> &e);
        virtual int eigenproblem(const DoubleMatrix &A, std::vector<Eigenpair> &e);
        virtual void eigenproblem(const DoubleMatrix &A, void *obj, bool (*f)(void*, const Eigenpair&, const Eigenpair&), std::vector<Eigenpair> &e);

        void eigenproblem(const DoubleMatrix &A, const DoubleMatrix &B, std::vector<Eigenpair> &e);

        //static void eigenproblem(const FluxFunction *f, const AccumulationFunction *a, const RealVector &p, std::vector<Eigenpair> &e);
        //static void eigenproblem(const FluxFunction *f, const AccumulationFunction *a, const StateEquation *eq, const RealVector &p, std::vector<Eigenpair> &e);
};

#endif // _EIGENPROBLEM_

